type Query {
    addresses(queryInput: AddressQueryInput): [Address]!
    people(personInput: PersonInput): [Owner]!
    person(id: ID!): Owner
    cats: [Cat!]!
    cat(id: ID!): Cat
    catsWithOwners: [CatOwnerRange!]!
    catsWithoutOwners: [CatOwnerRange!]!
    catOwners: [Owner!]!
    catSanctuaries: [PetSanctuary!]!
}

type Mutation {
    createCat(createCatInput: CreateCatInput): Cat
    removeCat(id: ID!): Cat
    updateCat(id: ID!, updateCatInput: UpdateCatInput): Cat
    createPerson(personInput: PersonInput): Person
    removePerson(id: ID!): Owner
    createCatOwner (createOwnerInput: CreateOwnerInput): Owner
    createOwnerFromId(createOwner: OwnerIdInput): Owner
    createCatSanctuary(createPetSanctuaryInput: CreatePetSanctuaryInput): PetSanctuary
    createAddress(addressInput: AddressInput!): Address
    removeAddress(id: ID!): Address
    updateAddress(id: ID!, updateAddress: AddressUpdateInput!): Address
    createPersonAddress(personId: ID!, addressId: ID!): Owner
    removePersonAddress(personId: ID!, addressId: ID!): Owner
    changePetOwnership(senctuaryId: ID!, ownerId: ID!, catId: ID!): PetSanctuary
}

type Subscription {
    catCreated: Cat
    catRemoved: Cat
    catUpdated: Cat
    catOwnerShipChanged: CatOwnerRange
}
scalar DateTime

type Cat {
    id: String!
    name: String!
    age: Float!
    breed: String!
    owners: [CatOwnerRange!]!
}

type Address {
    id: ID!
    street: String!
    city: String!
    stateProv: String!
    zipPostal: String!
}

type PetSanctuary {
    id: ID!
    name: String!
    address: Address!
    catInventory: [Cat!]!
}

input PetSanctuaryIdInput {
    id: ID!
}

input CreatePetSanctuaryInput {
    name: String!
    addressId: ID!
}

input AddressIdInput {
    id: ID!
}

input AddressInput {
    street: String!
    city: String!
    stateProv: String!
    zipPostal: String!
}

input AddressUpdateInput {
    street: String
    city: String
    stateProv: String
    zipPostal: String
}

input AddressQueryInput {
    street: String
    city: String
    stateProv: String
    zipPostal: String
}

type Person {
    id: ID!
    name: String!
    address: [Address!]!
    birthdate: DateTime
}

input PersonInput {
    name: String
    address: [AddressIdInput!]!
    birthdate: DateTimeInput
}

type Owner {
    id: ID!
    name: String!
    address: [Address!]!
    birthdate: DateTime
    cats: [Cat]
}

type CatOwnerRange {
    id: ID!
    cat: CatNHistory!
    owner: OwnerNHistory
    sanctuary: PetSanctuaryNHistory
    start: DateTime!
    end: DateTime
}

type CatNHistory {
    id: String!
    name: String!
    age: Float!
    breed: String!
}

type OwnerNHistory {
    id: ID!
    name: String!
    address: [Address!]!
    birthdate: DateTime
}

type PetSanctuaryNHistory {
    id: ID!
    name: String!
    address: Address!
}

input DateTimeInput {
    dateTime: String
    year: Int
    month: Int
    day: Int
    hour: Int
    minute: Int
    second: Int
    millisecond: Int
    pm: Boolean
    hour24: Boolean
    zone: String
}

input CatOwnerRangeInput {
    catId: ID!
    ownerId: ID
    sanctuaryId: ID
    start: DateTimeInput!
    end: DateTimeInput
}

input CreateCatInput {
    id: String
    name: String!
    age: Float!
    breed: String!
}

input UpdateCatInput {
    name: String
    age: Float
    breed: String
}

input CatIdInput {
    id: ID!
}

input CreateOwnerInput {
    ownerId: ID!
    sanctuaryId: ID!
    cats: [CatIdInput!]!
}

input OwnerIdInput {
    id: ID!
}

input OwnerUpdateInput {
    name: String
    address: [AddressIdInput]
    birthdate: DateTime
    cats: [CatIdInput]
}
