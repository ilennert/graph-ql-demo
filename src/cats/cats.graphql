type Query {
    cats: [Cat!]!
    cat(id: ID!): Cat
    catsWithOwners: [CatWithOwners!]!
    catsWithoutOwners: [CatWithOwners!]!
    catOwners: [OwnerRange!]!
    catSanctuaries: [PetSanctuary!]!
}

type Mutation {
    createCat(createCatInput: CreateCatInput): Cat
    removeCat(id: ID!): Cat
    updateCat(id: ID!, updateCatInput: UpdateCatInput): Cat
    createCatOwner (createOwnerInput: CreateOwnerInput): Owner
    createOwnerFromId(createOwner: OwnerIdInput): Owner
    createCatSanctuary(createPetSanctuaryInput: CreatePetSanctuaryInput): PetSanctuary
    createAddress(addressInput: AddressInput): Address
    unOwnCat(senctuary: PetSanctuaryIdInput, cat: CatIdInput): PetSanctuary
}

type Subscription {
    catCreated: Cat
    catRemoved: Cat
    catUpdated: Cat
}
scalar DateTime

type Cat {
    id: String!
    name: String!
    age: Float!
    breed: String!
}

type Address {
    id: ID!
    street: String!
    city: String!
    stateProv: String!
    zipPostal: String!
}

type PetSanctuary {
    id: ID!
    name: String!
    address: Address!
    catInventory: [Cat!]!
}

input PetSanctuaryIdInput {
    id: ID!
}

input CreatePetSanctuaryInput {
    name: String!
    addressRef: String!
}

input AddressIdInput {
    id: ID!
}

input AddressInput {
    street: String!
    city: String!
    stateProv: String!
    zipPostal: String!
}

input AddressUpdateInput {
    street: String
    city: String
    stateProv: String
    zipPostal: String
}

type Person {
    id: ID!
    name: String!
    address: [Address!]!
    birthdate: DateTime
}

type Owner implements Person {
    id: ID!
    name: String!
    address: [Address!]!
    birthdate: DateTime
    cats: [Cat!]!
}

type CatOwnedRange {
    id: ID!
    ownerRanges: [OwnerRange!]!
}

type OwnerRange {
    id: ID!
    owner: Owner!
    start: DateTime!
    end: DateTime!
}

type CatWithOwners implements Cat {
    id: String!
    name: String!
    age: Float!
    breed: String!
    ownersRanges: [OwnerRange!]!
}

input CreateCatInput {
    id: String
    name: String!
    age: Float!
    breed: String!
}

input UpdateCatInput {
    name: String
    age: Float
    breed: String
}

input CatIdInput {
    id: ID!
}

input CreatePersonInput {
    name: String!
    address: [AddressIdInput!]!
    birthdate: DateTime
}

input CreateOwnerInput {
    name: String!
    address: [AddressIdInput!]!
    birthdate: DateTime
    cats: [CatIdInput!]!
}

input OwnerIdInput {
    id: ID!
}

input OwnerUpdateInput {
    name: String
    address: [AddressIdInput]
    birthdate: DateTime
    cats: [CatIdInput]
}
